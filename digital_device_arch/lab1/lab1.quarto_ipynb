{
  "cells": [
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Параметры\n",
        "t_s = 1e-3  # Время моделирования (1 мс)\n",
        "h = 1e-6    # Шаг по времени (1 мкс)\n",
        "t = np.arange(0, t_s, h)  # Массив времени\n",
        "\n",
        "# Генерация прямоугольных импульсов\n",
        "def generate_signal(frequency):\n",
        "    signal = 0.5 + 4 * (np.sin(2 * np.pi * frequency * t) > 0)  # 0.5 и 4.5 В\n",
        "    return signal\n",
        "\n",
        "# Моделирование ёмкостной составляющей\n",
        "def simulate_capacitance(signal, T):\n",
        "    U = np.zeros_like(signal)\n",
        "    for n in range(len(signal) - 1):\n",
        "        U[n + 1] = U[n] + h * (signal[n] - U[n]) / T\n",
        "    return U\n",
        "\n",
        "# Добавление помех\n",
        "def add_noise(signal, amplitude):\n",
        "    noise = amplitude * (2 * np.random.rand(len(signal)) - 1)  # Случайная составляющая\n",
        "    return signal + noise\n",
        "\n",
        "# Логический каскад с гистерезисом\n",
        "def logic_cascade(U, Umin, Umax):\n",
        "    output = np.zeros_like(U)\n",
        "    for n in range(1, len(U)):\n",
        "        if output[n - 1] == 0:\n",
        "            if U[n] > Umax:\n",
        "                output[n] = 1\n",
        "            else:\n",
        "                output[n] = 0\n",
        "        else:\n",
        "            if U[n] < Umin:\n",
        "                output[n] = 0\n",
        "            else:\n",
        "                output[n] = 1\n",
        "    return output\n",
        "\n",
        "# Частоты сигналов\n",
        "frequencies = [5000, 10000]  # 5 кГц и 10 кГц\n",
        "\n",
        "# Постоянные времени\n",
        "T1 = 1e-5\n",
        "T2 = 2e-5\n",
        "\n",
        "# Запрещённые зоны\n",
        "Umin1, Umax1 = 1.5, 3.5\n",
        "Umin2, Umax2 = 2.0, 4.0\n",
        "\n",
        "# Амплитуды помех\n",
        "A1, A2 = 0.1, 0.3\n",
        "\n",
        "# Визуализация\n",
        "for freq in frequencies:\n",
        "    # Генерация сигнала\n",
        "    Y = generate_signal(freq)\n",
        "    \n",
        "    # Моделирование ёмкостной составляющей\n",
        "    U1 = simulate_capacitance(Y, T1)\n",
        "    U2 = simulate_capacitance(Y, T2)\n",
        "    \n",
        "    # Добавление помех\n",
        "    U1_noise = add_noise(U1, A1)\n",
        "    U2_noise = add_noise(U2, A2)\n",
        "    \n",
        "    # Логический каскад\n",
        "    output1 = logic_cascade(U1_noise, Umin1, Umax1)\n",
        "    output2 = logic_cascade(U2_noise, Umin2, Umax2)\n",
        "    \n",
        "    # Построение графиков\n",
        "    plt.figure(figsize=(12, 8))\n",
        "    \n",
        "    # График 1: Сигнал с генератора\n",
        "    plt.subplot(3, 1, 1)\n",
        "    plt.plot(t, Y, color='green', label=f'Генератор {freq} Гц')\n",
        "    plt.title(f'Сигнал с генератора ({freq} Гц)')\n",
        "    plt.xlabel('Время (с)')\n",
        "    plt.ylabel('Напряжение (В)')\n",
        "    plt.legend()\n",
        "    \n",
        "    # График 2: Сигнал с ёмкостной составляющей и помехами\n",
        "    plt.subplot(3, 1, 2)\n",
        "    plt.plot(t, U1_noise, color='red', label=f'С ёмкостью T1={T1}, помеха A1={A1}')\n",
        "    plt.plot(t, U2_noise, color='green', label=f'С ёмкостью T2={T2}, помеха A2={A2}')\n",
        "    plt.title('Сигнал с ёмкостью и помехами')\n",
        "    plt.xlabel('Время (с)')\n",
        "    plt.ylabel('Напряжение (В)')\n",
        "    plt.legend()\n",
        "    \n",
        "    # График 3: Выходной сигнал логического каскада\n",
        "    plt.subplot(3, 1, 3)\n",
        "    plt.plot(t, output1, color='red', label=f'Выход (Umin1={Umin1}, Umax1={Umax1})')\n",
        "    plt.plot(t, output2, color='green', label=f'Выход (Umin2={Umin2}, Umax2={Umax2})')\n",
        "    plt.title('Выходной сигнал логического каскада')\n",
        "    plt.xlabel('Время (с)')\n",
        "    plt.ylabel('Логический уровень')\n",
        "    plt.legend()\n",
        "    \n",
        "    plt.tight_layout()\n",
        "    plt.show()"
      ],
      "id": "5de9e3d7",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}